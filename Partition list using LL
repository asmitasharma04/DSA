class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode beforeHead = new ListNode(0);
        ListNode before = beforeHead;
        ListNode afterHead = new ListNode(0);
        ListNode after = afterHead;

        while (head != null) {
            if (head.val < x) {
                before.next = head;
                before = before.next;
            } else {
                after.next = head;
                after = after.next;
            }
            head = head.next;
        }

        after.next = null; // Ensure the last node of the 'after' list points to null
        before.next = afterHead.next; // Connect the 'before' list to the 'after' list

        return beforeHead.next;
    }

    public static void main(String[] args) {
        // Example 1
        Solution sol = new Solution();
        ListNode head1 = new ListNode(1);
        head1.next = new ListNode(4);
        head1.next.next = new ListNode(3);
        head1.next.next.next = new ListNode(2);
        head1.next.next.next.next = new ListNode(5);
        head1.next.next.next.next.next = new ListNode(2);

        ListNode result1 = sol.partition(head1, 3);
        while (result1 != null) {
            System.out.print(result1.val + " ");
            result1 = result1.next;
        }
        System.out.println(); // Output: 1 2 2 4 3 5

        // Example 2
        ListNode head2 = new ListNode(2);
        head2.next = new ListNode(1);

        ListNode result2 = sol.partition(head2, 2);
        while (result2 != null) {
            System.out.print(result2.val + " ");
            result2 = result2.next;
        }
        System.out.println(); // Output: 1 2
    }
}
