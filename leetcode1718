import java.util.Arrays;

public class Solution {
    public int[] constructDistancedSequence(int n) {
        int size = 2 * n - 1;
        int[] result = new int[size]; // Array to store the sequence
        boolean[] used = new boolean[n + 1]; // Used numbers tracker

        backtrack(result, used, n, 0);
        return result;
    }

    private boolean backtrack(int[] result, boolean[] used, int n, int index) {
        // If we have placed all numbers, return true
        if (index >= result.length) {
            return true;
        }

        // If position is already filled, move to next index
        if (result[index] != 0) {
            return backtrack(result, used, n, index + 1);
        }

        // Try placing numbers from n to 1 (largest first for lexicographically largest result)
        for (int num = n; num >= 1; num--) {
            if (used[num]) continue; // Skip if number is already used

            // If num == 1, it only occupies one position
            if (num == 1) {
                result[index] = num;
                used[num] = true;

                if (backtrack(result, used, n, index + 1)) return true;

                // Backtrack
                result[index] = 0;
                used[num] = false;
            } else {
                // Check if we can place `num` at `index` and `index + num`
                if (index + num < result.length && result[index + num] == 0) {
                    result[index] = result[index + num] = num;
                    used[num] = true;

                    if (backtrack(result, used, n, index + 1)) return true;

                    // Backtrack
                    result[index] = result[index + num] = 0;
                    used[num] = false;
                }
            }
        }
        return false;
    }

    // Test function
    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(Arrays.toString(sol.constructDistancedSequence(3))); // Output: [3,1,2,3,2]
        System.out.println(Arrays.toString(sol.constructDistancedSequence(5))); // Output: [5,3,1,4,3,5,2,4,2]
    }
}
