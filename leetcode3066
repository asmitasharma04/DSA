#include <iostream>
#include <queue>
#include <vector>

using namespace std;

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> minHeap(nums.begin(), nums.end());

        int operations = 0;

        // If the smallest number is already >= k, no operations needed
        if (minHeap.top() >= k) return 0;

        while (minHeap.size() > 1) {
            long long x = minHeap.top(); minHeap.pop(); // Smallest element
            long long y = minHeap.top(); minHeap.pop(); // Second smallest element
            
            long long newElement = min(x, y) * 2 + max(x, y);
            minHeap.push(newElement);
            operations++;

            // If after merging, the smallest number >= k, return count
            if (minHeap.top() >= k) return operations;
        }

        // If only one element left but < k, return -1
        return (minHeap.top() >= k) ? operations : -1;
    }
};

int main() {
    vector<int> nums = {1, 3, 5, 7}; 
    int k = 10;
    Solution sol;
    cout << sol.minOperations(nums, k) << endl;  // Output: 2
    return 0;
}
